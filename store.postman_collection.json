{
	"info": {
		"_postman_id": "6391bb0d-0a44-4df8-a373-f326252dce09",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15602340"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Get products list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"The response has all properties\", () => {\r",
									"      pm.expect(pm.response.text()).to.include(\"id\");\r",
									"      pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"price\");\r",
									"      pm.expect(pm.response.text()).to.include(\"sku\");\r",
									"      pm.expect(pm.response.text()).to.include(\"description\");\r",
									"\r",
									"    const responseJson = pm.response.json();\r",
									"    console.log(responseJson)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting products by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/products?sortOrder=ASC&sortKey=name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting products by price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/products?sortOrder=ASC&sortKey=price",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting products by sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/products?sortOrder=ASC&sortKey=sku",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "sku"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting products by description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=description",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "description"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pagination of products by page and pageSize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/products?page=1&pageSize=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 800000000000000000000000000,\r\n    \"sku\": 12332112300000000000000000000000,\r\n    \"description\": \"vkusno\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/9",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"9"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Get orders list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting orders by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/orders?sortOrder=ASC&sortKey=name",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting orders by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/orders?sortOrder=ASC&sortKey=id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting orders by sku",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/orders?sortOrder=ASC&sortKey=sku",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "sku"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pagination of orders by page and pageSize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/orders?page=1&pageSize=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order9\",\r\n    \"sku\": 51111445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get users list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if Alice Smith has the id-1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"console.log(jsonData[0].id)\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"});\r",
									"pm.test(\"Check if user with id-1 is Alice Smith\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"console.log(jsonData[0].firstName)\r",
									"    pm.expect(jsonData[0].firstName).to.contains(\"Alice\");\r",
									"    pm.expect(jsonData[0].lastName).to.contains(\"Smith\");\r",
									"});\r",
									"\r",
									"pm.test(\"The response about user with id-1 has all properties\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    console.log(jsonData)\r",
									"     pm.expect(jsonData).to.be.an(\"array\");\r",
									"    // pm.expect(jsonData[0].id).to.have.lengthOf(1);\r",
									"    pm.expect(jsonData[0].firstName).to.be.a('string');\r",
									"    pm.expect(jsonData[0].lastName).to.be.a('string');\r",
									"    pm.expect(jsonData[0].dateOfBirth).to.be.a('string');\r",
									"    pm.expect(jsonData[0].emailVerified).to.be.true;\r",
									"    pm.expect(jsonData[0].website).to.be.undefined ;\r",
									"    pm.expect(jsonData[0].age).to.be.null ;\r",
									"    pm.expect(jsonData[0].level).to.eql('admin');\r",
									"});\r",
									"\r",
									"pm.test(\"The response about user with id-1 has all properties\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    console.log(jsonData)\r",
									"     pm.expect(jsonData).to.be.an(\"array\");\r",
									"    // pm.expect(jsonData[0].id).to.have.lengthOf(1);\r",
									"    pm.expect(jsonData[0].firstName).to.be.a('string');\r",
									"    pm.expect(jsonData[0].lastName).to.be.a('string');\r",
									"    pm.expect(jsonData[0].dateOfBirth).to.be.a('string');\r",
									"    pm.expect(jsonData[0].emailVerified).to.be.true;\r",
									"    pm.expect(jsonData[0].website).to.be.undefined ;\r",
									"    pm.expect(jsonData[0].age).to.be.null ;\r",
									"    pm.expect(jsonData[0].level).to.eql('admin');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});\r",
									"\r",
									"pm.test(\"Response property matches environment variable\", function () {\r",
									"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
									"});\r",
									"\r",
									"pm.test(\"The response about user with id-9 has all properties\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    console.log(jsonData)\r",
									"     pm.expect(jsonData).to.be.an(\"object\");\r",
									"    // pm.expect(jsonData.id).to.have.lengthOf(1);\r",
									"    pm.expect(jsonData.firstName).to.be.a('string');\r",
									"    pm.expect(jsonData.lastName).to.be.a('string');\r",
									"    pm.expect(jsonData.dateOfBirth).to.be.a('string');\r",
									"    pm.expect(jsonData.age).to.be.null ;\r",
									"    pm.expect(jsonData.website).to.be.undefined ;\r",
									"    pm.expect(jsonData.emailVerified).to.be.true;\r",
									"    pm.expect(jsonData.level).to.eql('lord');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/9",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting users by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?sortOrder=ASC&sortKey=id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting users by firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?sortOrder=ASC&sortKey=firstName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "firstName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting users by lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?sortOrder=ASC&sortKey=lastName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "lastName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting users by email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?sortOrder=ASC&sortKey=email",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "email"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting users by dateOfBirth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?sortOrder=ASC&sortKey=dateOfBirth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "dateOfBirth"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting users by emailVerified",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?sortOrder=ASC&sortKey=emailVerified",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "emailVerified"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting users by signUpDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?sortOrder=ASC&sortKey=signUpDate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "signUpDate"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting users by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?sortOrder=ASC&sortKey=status",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "status"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting users by level",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?sortOrder=ASC&sortKey=level",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "level"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pagination of users by page and pageSize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is NOT 400\", function () {\r",
									"    pm.response.to.not.have.status(400);\r",
									"\r",
									"});\r",
									"pm.test(\"Successful POST request\", () => {\r",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header contains application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Cookie JSESSIONID is NOT present\", () => {\r",
									"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users?page=1&pageSize=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 9,\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"age\":  null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}